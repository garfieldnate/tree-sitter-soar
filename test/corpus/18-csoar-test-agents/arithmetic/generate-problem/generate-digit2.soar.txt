================================================================================
UnitTests/SoarTestAgents/arithmetic/generate-problem/generate-digit2.soar
================================================================================

sp {generate-problem*propose*generate-digit2
   (state <s> ^name generate-problem
              ^digits <d>
              ^current-column  { <> nil <cc> })
   (<cc> -^digit2
          ^digit1)
-->
   (<s> ^operator <op> + =)
   (<op> ^name generate-digit2
         ^digit2 <d>)
}

### For subtraction problem, make sure most significant digit of second number
### is less than the most significant digit of the top-number 
### Generate-digit1 will not have a 0 as most significant digit

sp {generate-problem*compare*generate-digit2
   (state <s> ^name generate-problem
              ^current-column <cc>
              ^problem.operation subtraction
              ^operator <op1> +)
   (<op1> ^name generate-digit2
          ^digit2 >= <d>)
   (<cc> ^digit1 <d>
         ^next-column nil)
-->
   (<s> ^operator <op1> <)
}


sp {generate-problem*apply*generate-digit2
   (state <s> ^operator <op>
              ^current-column <c1>)
   (<op> ^name generate-digit2
         ^digit2 <d>)
-->
   (<c1> ^digit2 <d>)
}


--------------------------------------------------------------------------------

(source_file
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (conjunctiveTest
            (relationalTest
              (relation)
              (string))
            (variable)))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string))
      (attrValueTests
        (string)))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (relationalTest
            (relation)
            (variable)))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable))))))
