================================================================================
UnitTests/SoarTestAgents/smem/SMemFunctionalTests_testLessNoSolution.soar
================================================================================

smem --set learning on

#Dump some records into smem
smem --add {
  (<x> ^name val
  	   ^value 1)
}
smem --add {
  (<x> ^name val
  	   ^value 5)
}
smem --add {
  (<x> ^name val
  	   ^value 2)
}
smem --add {
  (<x> ^name val
  	   ^value 4)
}
smem --add {
  (<x> ^name val
  	   ^value 3)
}
smem --add {
  (<x> ^name noMatch
  	   ^value 0)
}
smem --add {
  (<x> ^value 0)
}
smem --add {
  (<x> ^name val
       ^value monkey)
}

#Test the max query
sp {propose*query
  (state <s> ^superstate nil 
             ^smem <smem>)
  (<smem> -^result.retrieved)
--> 
  (<s> ^operator.name query)
}

sp {apply*query
  (state <s> ^operator.name query
             ^smem.command <sc>)
-->
  (<sc> ^query.name |val|)
  (<sc> ^math-query.value.less 1)
}

sp {success
  (state <s> ^smem.result.failure <lti>)
-->
  (succeeded)
}
--------------------------------------------------------------------------------

(source_file
  (ERROR
    (UNEXPECTED 'm')
    (UNEXPECTED 'e')
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'v')
    (intConstant)
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'n')
    (UNEXPECTED 'v'))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (quoted))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (floatConstant)))
        (valueTest
          (singleTest
            (string)))
        (valueTest
          (singleTest
            (variable)))))
    (funcCall
      (funcName
        (string)))))
