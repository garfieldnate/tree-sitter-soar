================================================================================
UnitTests/SoarTestAgents/smem/SMemFunctionalTests_testSimpleNonCueBasedRetrieval_ActivationRecency_WithoutActivateOnQuery.soar
================================================================================

smem --set learning on
smem --set activation-mode recency
smem --set activate-on-query off

# Add some data with multiple levels
smem --add {
  (@1 ^name foo ^location @2)
  (@2 ^x 1 ^y 2 ^z 3) 
  (@3 ^name bar ^location @4)
  (@4 ^x 2 ^y 3 ^z 1)
}


sp {propose*first-query
  (state <s> ^superstate nil 
  		    -^first)
--> 
  (<s> ^operator.name first-query)
}

sp {apply*first-query
  (state <s> ^operator.name first-query
             ^smem.command <sc>)
-->
  (<sc> ^query.name foo)
  (<s> ^first done)
}

sp {propose*second-query
  (state <s> ^superstate nil 
  			 ^first done
  			-^second)
--> 
  (<s> ^operator.name second-query)
}

sp {apply*second-query
  (state <s> ^operator.name second-query
             ^smem.command <sc>
             ^smem.result.retrieved.location <loc>)
  (<sc> ^query <first-query>)
-->
  (<sc> ^query <first-query> -)
  (<sc> ^retrieve <loc>)
}

sp {success
  (state <s> ^smem.result.retrieved <lti>)
  (<lti> ^x 1 ^y 2 ^z 3)
-->
  (write |Success!|)
  (halt)
}



--------------------------------------------------------------------------------

(source_file
  (ERROR
    (UNEXPECTED 'm')
    (UNEXPECTED 'e')
    (UNEXPECTED 'e')
    (UNEXPECTED 'm')
    (UNEXPECTED 'e')
    (UNEXPECTED 'n')
    (UNEXPECTED 'q')
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'n')
    (UNEXPECTED 'l')
    (intConstant)
    (intConstant)
    (UNEXPECTED 'x')
    (intConstant)
    (UNEXPECTED 'y')
    (intConstant)
    (UNEXPECTED 'z')
    (intConstant)
    (intConstant)
    (UNEXPECTED 'n')
    (UNEXPECTED 'l')
    (intConstant)
    (intConstant)
    (UNEXPECTED 'x')
    (intConstant)
    (UNEXPECTED 'y')
    (intConstant)
    (UNEXPECTED 'z')
    (intConstant))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (preferenceSpecifier
            (unaryPreference)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (funcCall
      (funcName
        (string))
      (quoted))
    (funcCall
      (funcName
        (string)))))
