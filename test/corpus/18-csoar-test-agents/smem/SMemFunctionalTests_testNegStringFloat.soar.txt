================================================================================
UnitTests/SoarTestAgents/smem/SMemFunctionalTests_testNegStringFloat.soar
================================================================================

smem --set learning on

sp {propose-initialize
    (state <s> ^superstate nil
				-^goal)
-->
	(<s> ^operator <o> +)
	(<o> ^name initialize)
}

sp {apply-initialize
	(state <s> ^operator <op>)
	(<op> ^name initialize)
-->
	(<s> ^goal first-query)
}

sp {propose-first-query
	(state <s> ^superstate nil
				^goal first-query)
-->
	(<s> ^operator <o> +)
	(<o> ^name first-query)
}

sp {apply-first-query
	(state <s> ^operator <op>
				^smem.command <cmd>)
	(<op> ^name first-query)
-->
	(<s> ^goal first-query -)
	(<s> ^goal copy-result)
	(<cmd> ^query.a 1)
}

sp {propose-copy-result
	(state <s> ^superstate nil
				^goal copy-result)
-->
	(<s> ^operator <o> +)
	(<o> ^name copy-result)
}

sp {apply-copy-result
	(state <s> ^operator <op>
				^smem <smem>)
	(<smem> ^result.retrieved <ret>
			^command <cmd>)
	(<cmd> ^query <qry>)
	(<op> ^name copy-result)
-->
	(<cmd> ^query <qry> -)
	(<s> ^goal copy-result -)
	(<s> ^goal second-query
			^first-result <ret>)
}

sp {propose-second-query
	(state <s> ^superstate nil
				^goal second-query)
-->
	(<s> ^operator <o> +)
	(<o> ^name second-query)
}

sp {apply-second-query
	(state <s> ^operator <op>
				^smem.command <cmd>
				^first-result <fr>)
	(<fr> ^b <b>
			^d <d>)
	(<op> ^name second-query)
-->
	(<s> ^goal second-query -)
	(<s> ^goal make-second-query)
	(<cmd> ^query.a 1
			^neg-query <nq>)
	(<nq> ^b <b>
			^d <d>)
}

sp {propose-make-second-query
	(state <s> ^superstate nil
				^goal make-second-query)
-->
	(<s> ^operator <o> +)
	(<o> ^name make-second-query)
}

sp {apply-make-second-query
	(state <s> ^operator <o>)
	(<o> ^name make-second-query)
-->
	(<s> ^goal make-second-query -)
	(<s> ^goal compare-results)
}

sp {elaborate-success
	(state <s> ^goal compare-results
				^first-result.b <b-good>
				^smem.result.retrieved <ret>)
	(<ret> -^b <b-good>
			^b <other>)
-->
	(succeeded)
}

sp {elaborate-failure-same-memory
	(state <s> ^goal compare-results
				^first-result.b <b-good>
				^smem.result.retrieved <ret>)
	(<ret> ^b <b-good>)
-->
	(failed)
}

sp {elaborate-failure-no-memory
	(state <s> ^goal compare-results
				^first-result.b <b-good>
				^smem.result.retrieved <ret>)
	(<ret> -^b)
-->
	(failed)
}

smem --add {
(<n1> ^a 1
		^b two
		^c 1 
		^d .1)
(<n2> ^a 1
		^b three
		^c 2  
		^d .2)
(<n3> ^a 1
		^b four
		^c 3  
		^d .3)
(<n4> ^a 2
		^b five
		^c 4  
		^d .4)
(<n5> ^a 3
		^b six
		^c 5  
		^d .5)
}


--------------------------------------------------------------------------------

(source_file
  (ERROR
    (UNEXPECTED 'm')
    (UNEXPECTED 'e'))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (floatConstant))
        (valueMake
          (string))
        (valueMake
          (string)))
      (attrValueMake
        (string)
        (valueMake
          (variable))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (funcCall
      (funcName
        (string))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (funcCall
      (funcName
        (string))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))))
    (funcCall
      (funcName
        (string))))
  (ERROR
    (UNEXPECTED 'm')
    (UNEXPECTED 'a')
    (variable)
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'b')
    (UNEXPECTED ')
    (intConstant)
    (UNEXPECTED ')
    (variable)
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'b')
    (UNEXPECTED ')
    (intConstant)
    (UNEXPECTED ')
    (variable)
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'b')
    (UNEXPECTED ')
    (intConstant)
    (UNEXPECTED ')
    (variable)
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'b')
    (UNEXPECTED ')
    (intConstant)
    (UNEXPECTED ')
    (variable)
    (UNEXPECTED 'a')
    (intConstant)
    (UNEXPECTED 'b')
    (UNEXPECTED ')
    (intConstant)
    (UNEXPECTED ')))
