================================================================================
UnitTests/SoarTestAgents/Chunking/tests/default/simple.soar
================================================================================

## File            : default/simple.soar
## Author          : John Laird
## Contents:         Simple default productions for Soar 9
##
###############################################################################

chunk singleton any top-state any


## Elaborate every substate with io pointer.

sp {default*elaborate*state*io
   "Elaborate each substate with io pointer."
   :default
   (state <s> ^impasse no-change
              ^superstate.io <io>)
   -->
   (<s> ^io <io>)}

## Elaborate top-state with pointer to self.
sp {elaborate*top-state
   :default
   (state <s> ^superstate nil)
-->
   (<s> ^top-state <s>)
}
## Elaborate a substate with a pointer to the top-state

sp {elaborate*state*top-state
   :default
   (state <s> ^superstate <ss>)
   (<ss> ^top-state <ts> 
        -^operator.name evaluate-operator)
-->
   (<s> ^top-state <ts>)
}
## Elaborate a state with the name of the superoperator

sp {elaborate*state*operator*name
   "Elaborate substates with name of operator."
   :default
   (state <s> ^superstate.operator.name <name>)
-->
   (<s> ^name <name>)}

### WAIT OPERATOR
### Propose wait for a state no-change

sp {top-ps*propose*wait
   "Propose wait if there is a state no-change."
   :default
   (state <s> ^attribute state
              ^choices none
             -^superstate.name evaluate-operator
             -^operator.name wait)
-->
   (<s> ^operator <o> + <)
   (<o> ^name wait)}

### This avoids a operator no-change after wait is selected
### Included it just to keep the trace simple - it never fires

sp {top-ps*apply*wait*random
   "Fake production just to avoid extra operator no-change."
   :default
   (state <s> ^operator <o>)
   (<o> ^name wait)
-->
   (<o> ^random elaboration)}

### HALT under bad conditions
sp {default*top-goal*halt*operator*failure
   "Halt if no operator can be selected for the top goal."
   :default
   (state <s> ^superstate nil)
   (state <ss> ^impasse constraint-failure ^superstate <s>)
   -->
   (write (crlf) |No operator can be selected for top goal.| )
   (write (crlf) |Soar must halt.| )
   (halt)}

### Break a tie by creating indifferent preferences if get a state no-change in an impasse.
sp {default*select*indifferent-and-worst*tied
   "Indifferent an operator if it leads to a tie that can not be resolved."
   :default
   (state <s1> ^operator <o> +)
   (state <s2> ^impasse tie
               ^superstate <s1>
               ^item <o>
               ^quiescence t)
   (state <s3> ^attribute state
           ^choices none
           ^superstate <s2>
           ^quiescence t)
   -->
   (<s1> ^operator <o> =, < )}

### If the subgoal for a conflict impasses fails, signified by 
### the choices none impasse below it, make a reject-preference for each 
### conflicted object.

sp {default*select*reject*conflict
   "Reject an object if it leads to a conflict that can not be resolved."
   :default
   (state <s1> ^operator <o> +)
   (state <s2> ^impasse conflict
               ^superstate <s1>
               ^item <o>
               ^quiescence t)
   (state <s3> ^attribute state
           ^choices none
           ^superstate <s2>
           ^quiescence t)
   -->
   (<s1> ^operator <o> -)}


--------------------------------------------------------------------------------

(source_file
  (ERROR
    (UNEXPECTED 'i')
    (UNEXPECTED 'a'))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (preferenceSpecifier
            (unaryPreference))
          (preferenceSpecifier
            (unaryPreference
              (unaryOrBinaryPreference))))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (funcCall
      (funcName
        (string))
      (crlf)
      (quoted))
    (funcCall
      (funcName
        (string))
      (crlf)
      (quoted))
    (funcCall
      (funcName
        (string))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (preferenceSpecifier
            (unaryPreference
              (unaryOrBinaryPreference)))
          (preferenceSpecifier
            (unaryPreference
              (unaryOrBinaryPreference)))))))
  (production
    (prod_name)
    (documentation)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (preferenceSpecifier
            (unaryPreference)))))))
