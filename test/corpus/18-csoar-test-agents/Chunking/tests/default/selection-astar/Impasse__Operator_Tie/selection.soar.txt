================================================================================
UnitTests/SoarTestAgents/Chunking/tests/default/selection-astar/Impasse__Operator_Tie/selection.soar
================================================================================

#sp {Impasse__Operator_Tie*compare*selection*prefer*no*estimated-cost
#   :default
#   (state <s> ^name selection
#              ^operator <op1> +
#                        <op2> +)
#  -{(<s> ^operator <o1> +)
#    (<o1> ^name compare-evaluations)}  # Avoid this rule contributing to chunks when best preference.
#   (<op1> ^name evaluate-operator
#          ^superoperator <sop>)
#  -{(<s> ^evaluation <e>)
#    (<e> ^estimated-cost
#         ^path-cost
#         ^superoperator <sop>)}
#   (<op2> ^name evaluate-operator
#          ^superoperator <sop2>)
#   (<s> ^evaluation <e2>)
#   (<e2> ^superoperator <sop2>
#         ^estimated-cost)
#-->
#   (<s> ^operator <op1> > <op2>)
#}
#
#sp {Impasse__Operator_Tie*compare*selection*prefer*no*estimated-cost
#   :default
#   (state <s> ^name selection
#              ^operator <op1> +)
#  -{(<s> ^operator <o1> +)
#    (<o1> ^name compare-evaluations)}  # Avoid this rule contributing to chunks when best preference.
#   (<op1> ^name evaluate-operator
#          ^superoperator <sop>)
#  -{(<s> ^evaluation <e>)
#    (<e> ^estimated-cost
#         ^path-cost
#         ^superoperator <sop>)}
#-->
#   (<s> ^operator <op1> >)
#}
#
sp {Impasse__Operator_Tie*compare*selection*avoid*estimated-cost
   :default
   (state <s> ^name selection
              ^operator <op2> +)
  -{(<s> ^operator <o1> +)
    (<o1> ^name compare-evaluations)}  # Avoid this rule contributing to chunks when best preference.
   (<op2> ^name evaluate-operator
          ^superoperator <sop2>)
   (<s> ^evaluation <e2>)
   (<e2> ^superoperator <sop2>
         ^estimated-cost)
-->
   (<s> ^operator <op2> <)
}

sp {Impasse__Operator_Tie*compare*selection*prefer*lower*estimated-cost
   :default
   (state <s> ^name selection
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name evaluate-operator
          ^superoperator <sop1>)
   (<s> ^evaluation <e1>)
   (<e1> ^superoperator <sop1>
          ^total-estimated-cost <ec>)
   (<op2> ^name evaluate-operator
          ^superoperator <sop2>)
   (<s> ^evaluation <e2>)
   (<e2> ^superoperator <sop2>
         ^total-estimated-cost > <ec>)
-->
   (<s> ^operator <op1> > <op2>)
#   (<s> ^operator <op2> -)
}

##
sp {Impasse__Operator_Tie*compare*selection*equal*estimated-cost
   :default
   (state <s> ^name selection
              ^operator <op1> +
                        { <> <op1> <op2> } +)
   (<op1> ^name evaluate-operator
          ^evaluation.total-estimated-cost <ec>)
   (<op2> ^name evaluate-operator
          ^evaluation.total-estimated-cost <ec>)
-->
   (<s> ^operator <op1> = <op2>)
}

sp {selection*select*failure-evaluation-becomes-reject-preference
   :default
   (state <s> ^name selection
              ^quiescence t
              ^superstate <ss>
              ^evaluation <e1>)
   (<ss> ^desired <e>)
   (<e1> ^symbolic-value << lose failure >>
         ^desired <e>
         ^superoperator <o1>)
-->
   (<ss> ^operator <o1> -)}


--------------------------------------------------------------------------------

(source_file
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (negativeCond
      (conjunctiveCond
        (condsForOneId
          (idTest
            (variable))
          (attrValueTests
            (string)
            (valueTest
              (variable))))
        (condsForOneId
          (idTest
            (variable))
          (attrValueTests
            (string)
            (valueTest
              (string))))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (relationalTest
            (relation)
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (binaryPreference
            (variable))))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))
        (valueTest
          (conjunctiveTest
            (relationalTest
              (relation)
              (variable))
            (variable)))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (string)
        (valueTest
          (variable))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (binaryPreference
            (variable))))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (disjunctionTest
            (string)
            (string))))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))))
