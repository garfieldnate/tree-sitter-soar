================================================================================
UnitTests/SoarTestAgents/Chunking/tests/default/selection/Operator_Tie/evaluate-operator/task-operator.soar
================================================================================


sp {evaluate-operator*propose*look-ahead
   :default
   (state <s> ^look-ahead-operator <o>
              ^untried-tied-operator <o>)
   -->
   (<s> ^operator <o> !)}   # makes learning with add-osk on more general - # might cause problems in some cases.

sp {evaluate-operator*propose*look-ahead*reject-all-others
   :default
   (state <s> ^look-ahead-operator <o>
              ^untried-tied-operator <o>
              ^operator { <> <o> <o1> } +)
   -->
   (<s> ^operator <o1> -)}

### Detect that the operator has been tried.

sp {evaluate-operator*elaborate*state*tried-tied-operator
   :default
   (state <s> ^operator <o> 
              ^look-ahead-operator <o>)
   -->
   (<s> ^tried-tied-operator <o>)}

# SBW 5/07: replaced all occurences of -^tried-tied-operator with ^untried-tied-operator
# this takes care of lots of local negations
sp {evaluate-operator*elaborate*state*remove*untried-tied-operator
   :default
   (state <s> ^look-ahead-operator <o> 
              ^operator <o>
              ^untried-tied-operator <o>)
-->
   (<s> ^untried-tied-operator <o> -)
}

--------------------------------------------------------------------------------

(source_file
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (conjunctiveTest
            (relationalTest
              (relation)
              (singleTest
                (variable)))
            (singleTest
              (variable))))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (flag)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable)))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference))))))
