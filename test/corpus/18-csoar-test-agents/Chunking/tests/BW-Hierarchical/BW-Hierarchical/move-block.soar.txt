================================================================================
UnitTests/SoarTestAgents/Chunking/tests/BW-Hierarchical/BW-Hierarchical/move-block.soar
================================================================================

###
### MOVE-BLOCK
###

# Propose moving a clear block ontop a clear object
## Modified to test that block is moveable instead of clear
##   clear will not stay in working memory during a move
## Added gripper tests so only proposed when gripper is empty or it is holding <blockA>
sp {P5*propose*move-block
   (state <s> ^name blocks-world)
   (<s> ^moveable <blockA>
        ^clear { <> <blockA> <object> })
   (<blockA> ^type block)
 -{(<s> ^ontop <ontop>)      # needed to avoid moving a block onto the table that is already there
    (<ontop> ^top-block <blockA>
             ^bottom-block <object>)}
  -{(<s> ^gripper.holding <> <blockA> <> nothing)}
-->
   (<s> ^operator <o> +, =)
   (<o> ^name move-block
        ^moving-block <blockA>
        ^destination <object>)}

--------------------------------------------------------------------------------

(source_file
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (variable))))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (conjunctiveTest
            (relationalTest
              (relation)
              (singleTest
                (variable)))
            (singleTest
              (variable))))))
    (condsForOneId
      (singleTest
        (variable))
      (attrValueTests
        (singleTest
          (string))
        (valueTest
          (singleTest
            (string)))))
    (negativeCond
      (conjunctiveCond
        (condsForOneId
          (singleTest
            (variable))
          (attrValueTests
            (singleTest
              (string))
            (valueTest
              (singleTest
                (variable)))))
        (condsForOneId
          (singleTest
            (variable))
          (attrValueTests
            (singleTest
              (string))
            (valueTest
              (singleTest
                (variable))))
          (attrValueTests
            (singleTest
              (string))
            (valueTest
              (singleTest
                (variable)))))))
    (negativeCond
      (conjunctiveCond
        (condsForOneId
          (singleTest
            (variable))
          (attrValueTests
            (singleTest
              (string))
            (singleTest
              (string))
            (valueTest
              (relationalTest
                (relation)
                (singleTest
                  (variable))))
            (valueTest
              (relationalTest
                (relation)
                (singleTest
                  (string))))))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (preferenceSpecifier
            (unaryPreference))
          (preferenceSpecifier
            (unaryPreference
              (unaryOrBinaryPreference))))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))
      (attrValueMake
        (string)
        (valueMake
          (variable)))
      (attrValueMake
        (string)
        (valueMake
          (variable))))))
