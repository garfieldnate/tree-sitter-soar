================================================================================
UnitTests/SoarTestAgents/Chunking/tests/arithmetic/arithmetic/generate-problem/generate-digit1.soar
================================================================================

sp {generate-problem*propose*generate-digit1
   (state <s> ^name generate-problem
              ^digits <d>
              ^current-column { <> nil <cc> })
   (<cc> -^digit1)
-->
   (<s> ^operator <op> + =)
   (<op> ^name generate-digit1
         ^digit1 <d>)
}


## For subtraction, make sure most significant digit of the top number
## is not zero (so can insure top number is > bottom number). 

sp {generate-problem*compare*generate-digit1
   (state <s> ^name generate-problem
              ^current-column <cc>
              ^problem.operation subtraction
              ^operator <op1> +)
   (<op1> ^name generate-digit1
          ^digit1 0)
   (<cc> ^next-column nil)
-->
   (<s> ^operator <op1> -)
}

sp {generate-problem*apply*generate-digit1
   (state <s> ^operator <op>
              ^current-column <c1>)
   (<op> ^name generate-digit1
         ^digit1 <d>)
-->
   (write (crlf) <d>)
   (<c1> ^digit1 <d>)
}


--------------------------------------------------------------------------------

(source_file
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (conjunctiveTest
            (relationalTest
              (relation)
              (string))
            (variable)))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)
          (unaryPreference))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (string)))
      (attrValueMake
        (string)
        (valueMake
          (variable)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (string))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string))))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable)
          (unaryPreference)))))
  (production
    (prod_name)
    (condsForOneId
      (condType)
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (variable)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (condsForOneId
      (idTest
        (variable))
      (attrValueTests
        (string)
        (valueTest
          (string)))
      (attrValueTests
        (string)
        (valueTest
          (variable))))
    (funcCall
      (funcName
        (string))
      (crlf)
      (variable))
    (variableMutation
      (variable)
      (attrValueMake
        (string)
        (valueMake
          (variable))))))
